openapi: 3.0.0
info:
  description: >
    This is a sample server Petstore server.

    [Learn about Swagger](https://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.

    For this sample, you can use the api key `special-key` to test the authorization filters
  version: 1.0.0
  title: Swagger Petstore
  termsOfService: https://helloreverb.com/terms/
  contact:
    name: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: pet
    description: Pet resource
  - name: store
    description: Store resource
  - name: user
    description: User resource
security:
  - global_auth:
    - global_pets
    - read_pets
paths:
  /pets:
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      description: ""
      operationId: addPet
      requestBody:
        $ref: "#/components/requestBodies/Pet"
      responses:
        "405":
          description: Invalid input
      security:
        - petstore_auth:
            - write_pets
            - read_pets
    put:
      tags:
        - pet
      summary: Update an existing pet
      description: ""
      operationId: updatePet
      requestBody:
        $ref: "#/components/requestBodies/Pet"
      responses:
        "400":
          $ref: "#/components/responses/InvalidId"
        "404":
          description: Pet not found
        "405":
          description: Validation exception
      security:
        - petstore_auth:
            - write_pets
            - read_pets
  /pets/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma seperated strings
      operationId: findPetsByStatus
      parameters:
        - in: query
          name: status
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            X-Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            X-Rate-Limit-Reset:
              description: The number of seconds left in the current period
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
          links:
            address:
              $ref: "#/components/links/address"
            address-232323232323:
              # the target link operationId
              operationId: findPetsByTags
              description: This is address-232323232323 description
              parameters:
                # get the `tags` field from the request path parameter named `tags`
                tags: $request.path.tags
        "400":
          description: Invalid status value
      security:
        - petstore_auth:
            - write_pets
            - read_pets
  /pets/findByTags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: Multiple tags can be provided with comma seperated strings. Use tag1,
        tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - in: query
          name: tags
          description: Tags to filter by
          required: false
          example: adorable
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            X-Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            X-Rate-Limit-Reset:
              description: The number of seconds left in the current period
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid tag value
      security:
        - petstore_auth:
            - write_pets
            - read_pets
  "/pets/{petId}":
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a pet when ID < 10. ID > 10 or nonintegers will simulate API
        error conditions
      operationId: getPetById
      parameters:
        - in: path
          name: petId
          description: ID of pet that needs to be fetched
          required: true
          example: 30
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            X-Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            X-Rate-Limit-Reset:
              description: The number of seconds left in the current period
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          $ref: "#/components/responses/InvalidId"
        "404":
          description: Pet not found
      security:
        - api_key: [ ]
        - petstore_auth:
            - write_pets
            - read_pets
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      description: ""
      operationId: updatePetWithForm
      parameters:
        - in: path
          name: petId
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the pet
                  type: string
                status:
                  description: Updated status of the pet
                  type: string
              required:
                - name
                - status
      responses:
        "405":
          description: Invalid input
      security:
        - petstore_auth:
            - write_pets
            - read_pets
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: ""
      operationId: deletePet
      parameters:
        - in: header
          name: api_key
          description: ""
          required: true
          schema:
            type: string
        - in: path
          name: petId
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid pet value
      security:
        - petstore_auth:
            - write_pets
            - read_pets
  /stores/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: ""
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
        description: order placed for purchasing the pet
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            X-Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            X-Rate-Limit-Reset:
              description: The number of seconds left in the current period
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid Order
  "/stores/order/{orderId}":
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values
        will generated exceptions
      operationId: getOrderById
      parameters:
        - in: path
          name: orderId
          description: ID of pet that needs to be fetched
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            X-Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            X-Rate-Limit-Reset:
              description: The number of seconds left in the current period
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          $ref: "#/components/responses/InvalidId"
        "404":
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above
        1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - in: path
          name: orderId
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          $ref: "#/components/responses/InvalidId"
        "404":
          description: Order not found
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Created user object
      responses:
        default:
          description: successful operation
  /users/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ""
      operationId: createUsersWithArrayInput
      requestBody:
        $ref: "#/components/requestBodies/UserArray"
      responses:
        default:
          description: successful operation
  /users/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ""
      operationId: createUsersWithListInput
      requestBody:
        $ref: "#/components/requestBodies/UserArray"
      responses:
        default:
          description: successful operation
  /users/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      parameters:
        - in: query
          name: username
          description: The user name for login
          required: false
          examples:
            testExample:
              $ref: '#/components/examples/testExample'
          schema:
            type: string
        - in: query
          name: password
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            X-Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            X-Rate-Limit-Reset:
              description: The number of seconds left in the current period
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /users/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  "/users/{username}":
    get:
      tags:
        - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      parameters:
        - in: path
          name: username
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            X-Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            X-Rate-Limit-Reset:
              description: The number of seconds left in the current period
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - in: path
          name: username
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Updated user object
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - in: path
          name: username
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
externalDocs:
  description: Find out more about Swagger
  url: https://swagger.io
servers:
  - url: https://petstore.swagger.io/v2
    description: This is server description
    variables:
      var1:
        description: Var1 desc
        default: def value for var1
        enum:
          - '1'
          - '2'
          - '3'
      var2:
        description: Var2 desc
        default: def value for var2
components:
  examples:
    testExample:
      description: my first example
      summary: ssdsdsdsdd
      externalValue: https://mydomain.com
      value: {
               "1": "2",
               "3": "4"
      }
  links:
    address:
      # the target link operationId
      operationId: findPetsByTags
      description: This is link description
      parameters:
        # get the `tags` field from the request path parameter named `tags`
        tags: $request.path.tags
  responses:
    InvalidId:
      description: Invalid ID supplied
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
      description: List of user object
    Pet:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Pet"
        application/xml:
          schema:
            $ref: "#/components/schemas/Pet"
      description: Pet object that needs to be added to the store
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
      description: This is another description
    petstore_auth:
      type: oauth2
      description: This is a standard oauth flow
      flows:
        implicit:
          authorizationUrl: https://petstore.swagger.io/api/oauth/dialog
          scopes:
            write_pets: modify pets in your account
            read_pets: read your pets
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          description: The name of the category
          minLength: 0
          maxLength: 255
          pattern: "[A-Za-zäöüÄÖÜß]{0,255}"
          default: DefaultCategory
          example: FoobarCategory
    Pet:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: "#/components/schemas/Category"
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        status:
          type: string
          description: pet status in the store,
          enum:
            - Dead
            - Alive
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: id description
          readOnly: true
          writeOnly: true
          deprecated: true
          nullable: true
          exclusiveMinimum: true
          exclusiveMaximum: true
          uniqueItems: true

          example: 1

          maximum: 100
          minimum: 10

          maxLength: 100
          minLength: 10

          maxItems: 999
          minItems: 99

          maxProperties: 12212
          minProperties: 12

          multipleOf: 12.34
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
          minimum: 0
          maximum: 10000
          default: 0
          example: 10
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - Ordered
            - Cancelled
        complete:
          type: boolean
